use crate::ast::{ast::*, decl::*, exp::*, stmt::*, op::*};
use crate::config::config::BType;

// lalrpop 里的约定
grammar;

// 约束 lexer 的行为
match {
  // 跳过空白符和注释
  r"\s*" => {},
  r"//[^\n\r]*[\n\r]*" => {},
  r"/\*[^\n\r]*[\n\r]*\*/" => {},
  // 剩下的情况采用默认方式处理
  _
}

// 定义 CompUnit, 其返回值类型为 String
// parser 在解析完成后的行为是返回 FuncDef 的值
pub CompUnit: CompUnit = <func_def: FuncDef> => CompUnit { <> };

// 同上, 不解释
FuncDef: FuncDef = {
  <func_type: BType> <ident: Ident> "(" ")" <block: Block> => {
    // construct FuncDef struct, using shorthand <> to pass all named fields
    FuncDef { <> }
  }
};

BType: BType = {
  "int" => BType::Int,
  "void" => BType::Void,
};

Block: Block = "{" <block_items: (BlockItem)*> "}" => Block { block_items };

BlockItem: BlockItem = {
  <stmt: Stmt> => BlockItem::Stmt { stmt },
  <decl: Decl> => BlockItem::Decl { decl },
};

Stmt: Stmt = {
  <l_val: LVal> "=" <exp: Exp> ";" => Stmt::RegularStmt { l_val, exp },
  "return" <exp: Exp> ";" => Stmt::ReturnStmt { exp }
};

LVal: LVal = {
  <ident: Ident> => LVal { ident },
};

Decl: Decl = {
  <const_decl: ConstDecl> => Decl::ConstDecl { const_decl },
  <var_decl: VarDecl> => Decl::VarDecl { var_decl },
}

ConstDecl: ConstDecl = {
  "const" <b_type: BType> <const_def: ConstDef> <other_const_defs: ("," ConstDef)*> ";" => {
    let mut const_defs = vec![const_def];
    for (_, def) in other_const_defs {
      const_defs.push(def);
    }
    ConstDecl { b_type, const_defs }
  }
}

ConstDef: ConstDef = {
  <ident: Ident> "=" <const_init_val: ConstInitVal> => ConstDef { <> }
};

ConstInitVal: ConstInitVal = {
  <const_exp: ConstExp> => ConstInitVal { const_exp }
};

ConstExp: ConstExp = {
  <exp: Exp> => ConstExp { exp: Box::new(exp) }
}

VarDecl: VarDecl = {
  <b_type: BType> <var_def: VarDef> <other_var_defs: ("," VarDef)*> ";" => {
    let mut var_defs = vec![var_def];
    for (_, def) in other_var_defs {
      var_defs.push(def);
    }
    VarDecl { b_type, var_defs }
  }
}

VarDef: VarDef = {
  <ident: Ident> "=" <init_val: InitVal> => VarDef { ident, init_val: Some(init_val) },
  <ident: Ident> => VarDef { ident, init_val: None },
};

InitVal: InitVal = {
  <exp: Exp> => InitVal { exp: Box::new(exp) }
};

// The priority of MulExp is higher than AddExp, so we should parse AddExp first, 
// which makes MulExp processed before AddExp in stmt_parser.
Exp: Exp = { 
  <lor_exp: LOrExp> => Exp::LOrExp { lor_exp: Box::new(lor_exp) },
};

// the match items in the block must follow the priority strictly
LOrExp: LOrExp = {
  <lor_exp: LOrExp> <lor_op: LOrOp> <land_exp: LAndExp> => LOrExp::LOrExp { 
    lor_exp: Box::new(lor_exp), 
    lor_op, 
    land_exp: Box::new(land_exp) 
  },
  <land_exp: LAndExp> => LOrExp::LAndExp { land_exp: Box::new(land_exp) },
};

LAndExp: LAndExp = {
  <land_exp: LAndExp> <land_op: LAndOp> <eq_exp: EqExp> => LAndExp::LAndExp { 
    land_exp: Box::new(land_exp), 
    land_op, 
    eq_exp: Box::new(eq_exp) 
  },
  <eq_exp: EqExp> => LAndExp::EqExp { eq_exp: Box::new(eq_exp) },
};

EqExp: EqExp = {
  <eq_exp: EqExp> <eq_op: EqOp> <rel_exp: RelExp> => EqExp::EqExp { 
    eq_exp: Box::new(eq_exp), 
    eq_op, 
    rel_exp: Box::new(rel_exp) 
  },
  <rel_exp: RelExp> => EqExp::RelExp { rel_exp: Box::new(rel_exp) },
};

RelExp: RelExp = {
  <rel_exp: RelExp> <rel_op: RelOp> <add_exp: AddExp> => RelExp::RelExp { 
    rel_exp: Box::new(rel_exp), 
    rel_op, 
    add_exp: Box::new(add_exp) 
  },
  <add_exp: AddExp> => RelExp::AddExp { add_exp: Box::new(add_exp) },
};

UnaryExp: UnaryExp = {
  <unary_op: UnaryOp> <unary_exp: UnaryExp> => UnaryExp::UnaryExp { unary_op: unary_op, unary_exp: Box::new(unary_exp) },
  <primary_exp: PrimaryExp> => UnaryExp::PrimaryExp { exp: Box::new(primary_exp) },
};

AddExp: AddExp = {
  <add_exp: AddExp> <add_op: AddOp> <mul_exp: MulExp> => AddExp::AddExp { 
    add_exp: Box::new(add_exp), 
    add_op, 
    mul_exp: Box::new(mul_exp) 
  },
  <mul_exp: MulExp> => AddExp::MulExp { mul_exp: Box::new(mul_exp) },
};

MulExp: MulExp = {
  <mul_exp: MulExp> <mul_op: MulOp> <unary_exp: UnaryExp> => MulExp::MulExp { 
    mul_exp: Box::new(mul_exp), 
    mul_op, 
    unary_exp: Box::new(unary_exp) 
  },
  <unary_exp: UnaryExp> => MulExp::UnaryExp { unary_exp: Box::new(unary_exp) },
};

PrimaryExp: PrimaryExp = {
  "(" <exp: Exp> ")" => PrimaryExp::Exp { exp: Box::new(exp) },
  <l_val: LVal> => PrimaryExp::LVal { l_val },
  <num: Number> => PrimaryExp::Number { value: num },
};

LOrOp: LOrOp = {
  "||" => LOrOp::Or,
};

LAndOp: LAndOp = {
  "&&" => LAndOp::And,
};

EqOp: EqOp = {
  "==" => EqOp::Eq,
  "!=" => EqOp::Ne,
};

RelOp: RelOp = {
  "<" => RelOp::Lt,
  "<=" => RelOp::Le,
  ">" => RelOp::Gt,
  ">=" => RelOp::Ge,
};

UnaryOp: UnaryOp = {
  r"\+" => UnaryOp::Plus,
  r"-" => UnaryOp::Minus,
  r"!" => UnaryOp::Not,
};

MulOp: MulOp = {
  r"\*" => MulOp::Mul,
  r"/" => MulOp::Div,
  r"%" => MulOp::Mod,
};

AddOp: AddOp = {
  r"\+" => AddOp::Add,
  r"-" => AddOp::Sub,
};

Number: i32 = <num: IntConst> => <>;

Ident: String = <s: r"[_a-zA-Z][_a-zA-Z0-9]*"> => {
  s.to_string()
};

IntConst: i32 = {
  r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
  r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
  r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
};